* todos
** DONE move ir2 to a stack machine
   CLOSED: [2020-03-17 Tue 11:49]
   there's no particular reason to have ir2 be register-based as it is now
   rather than stack-based; i just wrote it that way because it felt more
   intuitive. if i change to a stack-based ir, i'll basically have wasm ready
   to emit.
** investigate potential bugs in current function-naming scheme
*** TODO what happens if you bind two different lambdas to the same let-place with an IF
** DONE closures
   CLOSED: [2020-04-09 Thu 19:30]
   during the ir2 transform, whenever a function tries to access a var that
   isn't found in its arglist or locals (before searching the globals!), find
   it in the enclosing env and push it into a list of closure vars for that
   function. add an extra argument to procedures for closures, i.e. an
   env. when calling a function that takes closure arguments, first construct
   the closure env, then eval and pass its regular parameters.
* musings of mine
  i don't claim that any of these ideas are original, but typing them out helps
  me to understand them.
** typing continuations
   oh, this is just ~block~ and ~return-from~, only ~return-from~ is a
   procedure ~return-type -> never~, where ~return-type~ (the procedure's input
   type), is the return type of the block, and ~never~ is the type that unifies
   with everything, or the type of procedures that never return, or the empty
   type, or whatever. you make it a first-class closure, complete with saved
   local state. to accomplish this, write a sexy compiler with a strict type
   system that carefully controls mutability, and do tracing to detect which
   parts of state you have to save. use efficient generational garbage
   collection (with a special case for concurrent shared memory) rather than a
   stack (similar to how chicken scheme works, i guess?)

   also, for some reason, it's better to do delimited continuations --- i
   suppose this makes the "what state do i need to save" analysis easier. you
   introduce another form, ~delimit~, with the nesting rule that each ~block~
   is nested within a ~delimit~, and each ~return-from~ is nested within a
   ~block~.
